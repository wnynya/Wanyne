script window.bundle = new Object(); 
script window.client = new Object(); 
script window.global = new Object();
if client && client.id
  script client.login = true; 
  script client.id = "#{client.id}"; 
  script client.eid = "#{client.eid}"; 
  script client.name = "#{client.name}";
script window.Math.rem = (n = 1) => { return n * parseFloat(getComputedStyle(document.documentElement).fontSize); }
script function vh() { document.documentElement.style.setProperty('--vh', window.innerHeight * 0.01 + 'px'); } window.addEventListener('resize', vh); vh();

//- Lapis
script(src="/resources/lapis.mjs" type="module")
script(type="module").
  window.Lapis.Script = class {
    constructor() {
      this.id = (() => {
        try {
          throw new Error();
        } catch (e) {
          for (const s of e.stack.split('\n'))
            if (s.match(/(https?:\/\/.+\.mjs)/))
              return btoa(s.match(/(https?:\/\/.+\.mjs)/)[0]);
        }
      })();
      Lapis.scripts.cache[this.id] = this;
    }
    load() {}
    unload() {}
  };
  window.LapisScript = Lapis.Script;

  window.Lapis.ScriptElement = class extends HTMLElement {
    constructor() {
      super();
      this.eval = this.getAttribute('eval');
      if (this.eval) {
        eval(this.eval);
        return;
      }
      this.src = this.getAttribute('src');
      this.srco = this.src;
      if (!this.src) {
        return;
      }
      if (this.src.startsWith('/')) {
        this.src = 'https://' + window.Lapis.host + this.src;
      }
      this.id = btoa(this.src);
      if (Lapis.scripts.cache.hasOwnProperty(this.id)) {
        this.load();
      } else {
        const script = document.createElement('script');
        script.src = this.src;
        script.type = 'module';
        script.addEventListener('load', (event) => {
          this.load();
        });
        document.body.appendChild(script);
      }
    }
    load() {
      if (
        !document
          .querySelector('main')
          .querySelector(`lapis-script[src="${this.srco}"]`)
      ) {
        return;
      }
      const runtime = Lapis.scripts.cache[this.id];
      if (Lapis.scripts.loads.includes(runtime)) {
        return;
      }
      runtime.load();
      Lapis.scripts.loads.push(runtime);
    }
  };
  customElements.define('lapis-script', Lapis.ScriptElement);

  window.Lapis.StyleElement = class extends HTMLElement {
    constructor() {
      super();
      this.src = this.getAttribute('src');
      if (!this.src) {
        return;
      }
      if (this.src.startsWith('/')) {
        this.src = 'https://' + window.Lapis.host + this.src;
      }
      this.id = btoa(this.src);
      if (!Lapis.styles.includes(this.id)) {
        Lapis.styles.push(this.id);
        const link = document.createElement('link');
        link.type = 'text/css';
        link.rel = 'stylesheet';
        link.href = this.src;
        document.body.appendChild(link);
      }
    }
  };
  customElements.define('lapis-style', Lapis.StyleElement);

//- Notification
script(type="module" src="/resources/modules/notification.mjs" defer="defer")

//- Cursor
script(type="module" src="/resources/modules/cursor.mjs" defer="defer")

//- Inputs
script(type="module" src="/resources/modules/inputs.mjs" defer="defer")

//- Sidebar
script(type="module" defer="defer").
  class Sidebar {
    constructor(element = document.querySelector('main')) {
      if (!document.querySelector('aside.sidebar')) {
        return;
      }
      this.lastWidth = window.innerWidth;
      this.onScroll = () => {
        const aside = document.querySelector('aside.sidebar');
        const arect = aside.getBoundingClientRect();
        const rect = element.getBoundingClientRect();
        if (arect.height + Math.rem(5) > rect.bottom && window.scrollY - rect.height > rect.bottom) {
          aside.style.top = rect.bottom - arect.height + 'px';
        } else {
          aside.style.top = 'max(5rem, ' + rect.top + 'px)';
        }
      };
      const _this = this;
      this.onResize = () => {
        _this.lastWidth < 900 && 900 < window.innerWidth ? _this.close() : null;
        _this.lastWidth = window.innerWidth;
        _this.onScroll();
      };

      document.querySelector('aside.sidebar > button').addEventListener('click', (event) => {
        document.querySelector('aside.sidebar').classList.contains('open') ? _this.close() : _this.open();
      });

      var i = setInterval(() => {
        this.onScroll();
      }, 100);
      setTimeout(() => {
        clearInterval(i);
      }, 1000);
      this.onScroll();

      this.load();
    }

    open() {
      document.querySelector('aside.sidebar') ? document.querySelector('aside.sidebar').classList.add('open') : null;
    }

    close() {
      document.querySelector('aside.sidebar') ? document.querySelector('aside.sidebar').classList.remove('open') : null;
    }

    hide() {
      this.close();
      document.querySelector('aside.sidebar') ? document.querySelector('aside.sidebar').classList.add('hide') : null;
    }

    show() {
      document.querySelector('aside.sidebar') ? document.querySelector('aside.sidebar').classList.remove('hide') : null;
    }

    load() {
      document.addEventListener('scroll', this.onScroll);
      window.addEventListener('resize', this.onResize);
    }

    unload() {
      document.removeEventListener('scroll', this.onScroll);
      window.removeEventListener('resize', this.onResize);
    }
  }
  window.Sidebar = Sidebar;