/* Inputs */
[contenteditable='true']:empty:before {
  content: attr(placeholder);
  color: var(--input-ph);
}
input,
textarea {
  -webkit-appearance: none;
}
input:focus,
textarea:focus {
  outline: none;
}
input:disabled,
textarea:disabled,
button:disabled {
  cursor: not-allowed !important;
}
input:disabled[color],
textarea:disabled[color] {
  pointer-events: none;
  --input-bg: var(--bg-h);
  --input-bg-230: var(--bg);
  --input-fg: var(--fg);
  --input-ph: var(--fg-l);
  --input-ol: var(--fg);

  --button-bg: var(--bg-h);
  --button-bg-hover: var(--bg);
  --button-fg: var(--fg);
  --button-ph: var(--fg-l);
  --button-ol: var(--fg);
}
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
textarea:-webkit-autofill,
textarea:-webkit-autofill:hover,
textarea:-webkit-autofill:focus,
select:-webkit-autofill,
select:-webkit-autofill:hover,
select:-webkit-autofill:focus {
  box-shadow: 0 0 0 1000px var(--input-bg) inset;
  font-family: var(--sans-serif);
  -webkit-text-fill-color: var(--input-fg);
}

[color='black'] {
  --button-bg: var(--t0);
  --button-fg: var(--t245);
  --button-bg-hover: var(--t30);
  --button-fg-hover: var(--t245);
}
[color='black'][outline] {
  --button-bg: var(--t30);
  --button-fg: var(--t245);
  --button-ol: var(--t0);
  --button-bg-hover: var(--t0);
}
[color='yellow'] {
  --button-bg: var(--yellow);
  --button-fg: var(--t255);
  --button-bg-hover: var(--yellow-l);
  --button-fg-hover: var(--t255);
}
[color='yellow'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--yellow);
  --button-ol: var(--yellow);
  --button-bg-hover: var(--yellow);
}
[color='orange'] {
  --button-bg: var(--orange);
  --button-fg: var(--t255);
  --button-bg-hover: var(--orange-l);
  --button-fg-hover: var(--t255);
}
[color='orange'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--orange);
  --button-ol: var(--orange);
  --button-bg-hover: var(--orange);
}
[color='red'] {
  --button-bg: var(--red);
  --button-fg: var(--t255);
  --button-bg-hover: var(--red-l);
  --button-fg-hover: var(--t255);
}
[color='red'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--red);
  --button-ol: var(--red);
  --button-bg-hover: var(--red);
}
[color='magenta'] {
  --button-bg: var(--magenta);
  --button-fg: var(--t255);
  --button-bg-hover: var(--magenta-l);
  --button-fg-hover: var(--t255);
}
[color='magenta'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--magenta);
  --button-ol: var(--magenta);
  --button-bg-hover: var(--magenta);
}
[color='purple'] {
  --button-bg: var(--purple);
  --button-fg: var(--t255);
  --button-bg-hover: var(--purple-l);
  --button-fg-hover: var(--t255);
}
[color='purple'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--purple);
  --button-ol: var(--purple);
  --button-bg-hover: var(--purple);
}
[color='blue'] {
  --button-bg: var(--blue);
  --button-fg: var(--t255);
  --button-bg-hover: var(--blue-l);
  --button-fg-hover: var(--t255);
}
[color='blue'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--blue);
  --button-ol: var(--blue);
  --button-bg-hover: var(--blue);
}
[color='cyan'] {
  --button-bg: var(--cyan);
  --button-fg: var(--t255);
  --button-bg-hover: var(--cyan-l);
  --button-fg-hover: var(--t255);
}
[color='cyan'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--cyan);
  --button-ol: var(--cyan);
  --button-bg-hover: var(--cyan);
}
[color='green'] {
  --button-bg: var(--green);
  --button-fg: var(--t255);
  --button-bg-hover: var(--green-l);
  --button-fg-hover: var(--t255);
}
[color='green'][outline] {
  --button-bg: var(--t230);
  --button-fg: var(--green);
  --button-ol: var(--green);
  --button-bg-hover: var(--green);
}
/* button-like inputs (button, submit...) */
/* [pug]
button button
input(type="button" value="button") 
*/
[button] {
  display: block;
}
button {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: 4rem;
  padding: 0 2.5rem;
  border-radius: 1rem;
  background: var(--button-bg);
  font-family: var(--sans-serif);
  font-size: 1.25rem;
  font-weight: 500;
  color: var(--button-fg);
  transition: transform 0.1s ease-out, background 0.05s ease-out,
    color 0.05s ease-out;
  cursor: pointer;
  border: none;
  outline: none;
}
button[medium] {
  height: 3rem;
  padding: 0 1.75rem;
  border-radius: 0.75rem;
  font-size: 1.25rem;
}
button[small] {
  height: 2rem;
  padding: 0 1rem;
  border-radius: 0.5rem;
  font-size: 1rem;
}
button:hover,
button[selected] {
  background: var(--button-bg-hover);
  color: var(--button-fg-hover);
}
button:active {
  transform: scale(0.975);
}
button:focus {
  outline: none;
}
button:disabled {
  background: var(--button-bg-disabled);
  color: var(--button-fg-disabled);
  cursor: not-allowed;
}
button[outline] {
  box-shadow: inset 0 0 0 0.1rem var(--button-ol) !important;
}
button:disabled[outline] {
  box-shadow: inset 0 0 0 0.1rem var(--button-ol-disabled) !important;
}
button[hoveroutline]:hover {
  box-shadow: inset 0 0 0 0.1rem var(--button-ol) !important;
}
button:disabled[hoveroutline]:hover {
  box-shadow: inset 0 0 0 0.1rem var(--button-ol-disabled) !important;
}
button[magnify]:hover {
  background: var(--button-bg);
  color: var(--button-fg);
  transform: scale(1.05);
}
button[round] {
  border-radius: 100rem !important;
}
button[ellipse] {
  border-radius: 100% 100% !important;
}
button svg {
  fill: var(--button-fg);
  stroke: var(--button-fg);
  overflow: visible;
}
button svg * {
  fill: var(--button-fg);
  stroke: var(--button-fg);
}

/* text-like inputs (text, number, password...) */
/* [pug]
.input.text
  input(type="text" placeholder="placholder") 
  label label
  .border
*/
.input.text {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  position: relative;
  width: 100%;
  height: 4rem;
}
.textarea {
  position: relative;
  width: 100%;
  overflow: hidden;
}
.input.text > input,
.input.text > input:-webkit-autofill,
.input.text > input:-webkit-autofill:hover,
.input.text > input:-webkit-autofill:focus,
.textarea > textarea,
.textarea > textarea:-webkit-autofill,
.textarea > textarea:-webkit-autofill:hover,
.textarea > textarea:-webkit-autofill:focus {
  width: calc(100% - 2rem);
  height: 100%;
  padding: 0 1rem 0 1rem;
  margin: 0;
  border-radius: 1rem;
  cursor: text;
  font-family: var(--sans-serif);
  font-size: 1.25rem !important;
  font-weight: 500 !important;
  background: var(--input-bg);
  box-shadow: 0 0 0 100rem var(--input-bg) inset !important;
  -webkit-text-fill-color: var(--input-fg) !important;
  word-break: break-all;
}
.textarea > textarea {
  vertical-align: bottom;
  max-width: calc(100% - 2rem);
  min-width: calc(100% - 2rem);
  height: 100%;
  min-height: 6rem;
  padding: 1rem 1rem 1rem 1rem;
}
.input.text[label='inner'] > input {
  height: calc(100% - 1rem);
  padding: 0.875rem 1rem 0 1rem;
}
.textarea[label='inner'] > textarea {
  min-height: 5rem;
  padding: 2rem 1rem 1rem 1rem;
}
.input.text > input:placeholder-shown,
.textarea > textarea:placeholder-shown {
  -webkit-text-fill-color: var(--input-ph) !important;
}
.input.text[label='inner'] > input:placeholder-shown {
  height: 100%;
  padding: 0 1rem 0 1rem;
}
.textarea[label='inner'] > textarea:placeholder-shown {
  min-height: 6rem;
  padding: 1rem 1rem 1rem 1rem;
}
.input.text > input::placeholder,
.input.text > input::-webkit-input-placeholder,
.textarea > textarea::placeholder,
.textarea > textarea::-webkit-input-placeholder {
  color: var(--input-ph);
}
.input.text > label,
.textarea > label {
  display: none;
  z-index: 30000;
}
.input.text[label='inner'] > label,
.textarea[label='inner'] > label {
  display: block;
  position: absolute;
  top: 0.875rem;
  left: 1rem;
  font-family: var(--sans-serif);
  font-size: 0.875rem;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  pointer-events: none;
  color: var(--input-fg);
}
.input.text[label='inner'] > input:placeholder-shown ~ label,
.textarea[label='inner'] > textarea:placeholder-shown ~ label {
  opacity: 0;
  top: 1rem;
}
.input.text[label='top'] > label,
.textarea[label='top'] > label {
  display: block;
  position: absolute;
  top: -0.675rem;
  left: 0.5rem;
  font-family: var(--sans-serif);
  font-size: 0.875rem;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  pointer-events: none;
  color: var(--input-fg);
  background: var(--input-bg);
  padding: 0.3rem 0.5rem;
  border-radius: 100rem;
}
.input.text[label='top'] > input:placeholder-shown ~ label,
.textarea[label='top'] > textarea:placeholder-shown ~ label {
  opacity: 0;
  top: 0rem;
}
.input.text > .border,
.textarea > .border {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 1rem;
  transition: box-shadow 0.1s ease-out, padding-bottom 0.1s ease-out,
    top 0.1s ease-out;
  pointer-events: none;
  z-index: 20000;
  padding-bottom: 0;
  padding-top: 0;
}
.input.text > input:focus ~ .border,
.textarea > textarea:focus ~ .border {
  transition: box-shadow 0.2s ease-out, padding-bottom 0.1s ease-out,
    top 0.1s ease-out;
  box-shadow: inset 0 0 0 0.1em var(--input-ol) !important;
}
.input.text > input[type='search'] {
  width: 100%;
  height: 100%;
}
.input.text[medium] {
  height: 3rem;
}
.input.text[medium] > input {
  height: 100%;
  padding: 0 1rem 0 1rem;
  border-radius: 0.75rem;
}
.input.text[small] {
  height: 2rem;
}
.input.text[small] > input {
  font-size: 1rem !important;
  height: 100%;
  padding: 0 1rem 0 1rem;
  border-radius: 0.75rem;
}
.layer.input.text {
  position: absolute;
}
.input.text > .autocomplete {
  width: calc(100% - 2rem);
  position: absolute;
  background: var(--input-bg);
  z-index: 10000;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.1s ease-out, top 0.1s ease-out, bottom 0.1s ease-out;
  max-height: 10em;
  overflow-y: auto;
}
.input.text > .autocomplete.event {
  pointer-events: all;
}
.input.text > .autocomplete.drop {
  pointer-events: all;
  opacity: 1;
}
.input.text > .autocomplete > label {
  font-family: var(--sans-serif);
  font-size: 1rem;
  font-weight: 500;
  color: var(--input-ph);
  display: block;
  line-height: 2rem;
  height: 2rem;
  overflow-x: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.input.text > .autocomplete > label:hover,
.input.text > .autocomplete > label[selected='true'] {
  color: var(--input-fg);
}
.input.text > .autocomplete > label.hide {
  display: none;
}
.input.text > .autocomplete.bottom {
  top: 1.5rem;
  border-top: solid 0.125em var(--input-ph);
  border-bottom-left-radius: 1rem;
  border-bottom-right-radius: 1rem;
  padding: 0 1rem 0.5rem 1rem;
}
.input.text > .autocomplete.bottom.drop {
  top: 3.5rem;
}
.input.text > .autocomplete.top {
  bottom: 1.5rem;
  border-bottom: solid 1.5px var(--input-ph);
  border-top-left-radius: 1rem;
  border-top-right-radius: 1rem;
  padding: 0.5rem 1rem 0 1rem;
}
.input.text > .autocomplete.top.drop {
  bottom: 3.5rem;
}
.input.text.h45 > .autocomplete.bottom {
  top: 0.5rem;
  border-top: solid 0.125em var(--input-ph);
  border-bottom-left-radius: 1rem;
  border-bottom-right-radius: 1rem;
  padding: 0 1rem 0.5rem 1rem;
}
.input.text.h45 > .autocomplete.bottom.drop {
  top: 2.5rem;
}
.input.text.h45 > .autocomplete.top {
  bottom: 0.5rem;
  border-bottom: solid 1.5px var(--input-ph);
  border-top-left-radius: 1rem;
  border-top-right-radius: 1rem;
  padding: 0.5rem 1rem 0 1rem;
}
.input.text.h45 > .autocomplete.top.drop {
  bottom: 2.5rem;
}

.input.text > input[type='search'] {
  width: 100%;
  height: 100%;
}
.input.text.h45 > input {
  height: 100%;
  padding: 0 1rem 0 1rem;
}
.input.text.h45 {
  height: 3rem;
}
.layer.input.text {
  position: absolute;
}

/* checkbox-like inputs (single) (checkbox, radio...) */
/* [pug]
.input.checkbox
  .checkwrapper
    input(type="checkbox")
    label label
    .checkbtn
*/
.input.checkbox {
  display: inline-flex;
  min-height: 1.5rem;
  align-items: center;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  position: relative;
  margin-right: 3rem;
}
.input.checkbox[color] {
  --input-fg: var(--button-bg);
}
.input.checkbox:only-child,
.input.checkbox:last-child {
  margin-right: 0;
}
.input.checkbox.block,
.input.checkbox.wide {
  display: flex;
  margin-right: 0;
}
.input.checkbox label {
  font-family: var(--sans-serif);
  font-size: 1.25rem;
  font-weight: 500;
  display: block;
  width: auto;
  min-height: 1.5rem;
  line-height: 1.5rem;
  pointer-events: none;
  text-align: left;
  margin-left: 2rem;
  color: var(--input-ph);
  transition: color 0.1s ease-out;
}
.input.checkbox input:checked ~ label {
  color: var(--input-fg);
}
.input.checkbox.wide label {
  width: 100%;
  text-align: right;
  margin-left: 2rem;
}
.input.checkbox.right label {
  text-align: right;
  margin-left: unset;
  margin-right: 2rem;
}
.input.checkbox.right.wide label {
  text-align: left;
  margin-left: unset;
  margin-right: 2rem;
}
.input.checkbox input {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
  background-color: unset;
  opacity: 0;
}
.input.checkbox .checkbtn {
  position: absolute;
  top: 0;
  left: 0;
  width: 1.5rem;
  height: 1.5rem;
  box-shadow: inset 0 0 0 0 var(--input-ol);
  transition: box-shadow 0.1s ease-out;
  pointer-events: none;
  border-radius: 100%;
  background: var(--input-bg);
}
.input.checkbox.right .checkbtn {
  left: unset;
  right: 0;
}
.input.checkbox.left .checkbtn {
  left: 0;
}
.input.checkbox:hover input ~ .checkbtn {
  transition: box-shadow 0.1s ease-out;
  box-shadow: inset 0 0 0 0.125rem var(--input-ol);
}
.input.checkbox input:checked ~ .checkbtn,
.input.checkbox:hover input:checked ~ .checkbtn {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5rem var(--input-ol);
}
.input.checkbox input:disabled ~ label {
  color: var(--input-ph);
}
.input.checkbox:hover input:disabled ~ .checkbtn {
  transition: box-shadow 0.1s ease-out;
  box-shadow: inset 0 0 0 0 var(--input-ol);
}
.input.checkbox:hover input:disabled:checked ~ .checkbtn {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5rem var(--input-ol);
}
/* radio input (multiple set) */
/* [pug]
.input.radio
  label radio
  .options
    .input.checkbox.left
      .checkwrapper
      input(type="radio" name="radio")
        label label1
        .checkbtn
    .input.checkbox.left
      .checkwrapper
      input(type="radio" name="radio")
        label label2
        .checkbtn
*/
.input.radio {
  position: relative;
  width: 100%;
  min-height: 6rem;
  border-radius: 1rem;
  background: var(--input-bg);
  display: flex;
  justify-content: flex-end;
}
.input.radio .input.checkbox {
  display: flex;
  --input-bg: var(--input-bg-230);
  --button-bg: var(--button-bg-230);
}
.input.radio .input.checkbox:not([color]) {
  --button-bg: var(--input-fg);
}
.input.radio .checkbtn {
  --input-bg: var(--bg);
}
.input.radio > label {
  position: absolute;
  top: 0.5rem;
  left: 1rem;
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  line-height: 2rem;
}
.input.radio.multiline label {
  top: 0.5rem;
}
.input.radio .options {
  width: calc(50% - 1rem);
  margin-right: 1rem;
  padding-top: 1rem;
  padding-bottom: 0.5rem;
}
.input.radio .options .input {
  margin-bottom: 0.5rem;
}
/* select input */
/* [pug]
.input.select
  label select
  select(name="location")
    option(value="" disabled selected) select option
    option(value="option1") option1
    option(value="option2") option2
  .border
*/
.input.select {
  position: relative;
  width: 100%;
  height: 4rem;
  border-radius: 1rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.input.select.multiline {
  height: 6rem;
  display: block;
}
.input.select select {
  position: absolute;
  width: calc(50% - 1rem);
  height: 2rem;
  right: 1rem;
  border-radius: 5px;
  background: var(--input-bg-230);
  color: var(--input-fg);
  border: none;
  padding-right: 5px;
  padding-left: 5px;
  font-family: var(--sans-serif);
  font-size: 10pt;
  font-weight: 500;
  cursor: pointer;
  outline: none;
}
.input.select.nolabel select {
  width: calc(100% - 2rem);
  bottom: 1rem;
}
.input.select.multiline select {
  width: calc(100% - 2rem);
  bottom: 1rem;
}
.input.select select option,
.input.select select optgroup {
  font-family: var(--sans-serif);
  font-size: 10pt;
  font-weight: 500;
  background: var(--input-bg);
  color: var(--input-fg);
}
.input.select label {
  position: absolute;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  margin-left: 1rem;
  line-height: 2rem;
}
.input.select.multiline label {
  top: 0.5rem;
}
.input.select .border {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 1rem;
  transition: box-shadow 0.1s ease-out;
  pointer-events: none;
}
.input.select select:focus ~ .border {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5px var(--input-fg) !important;
}
/* range input (needs script) */
.input.range {
  position: relative;
  width: 100%;
  min-height: 4rem;
  border-radius: 1rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: flex-end;
  pointer-events: none;
  overflow-y: hidden;
  overflow-x: hidden;
}
.input.range > label {
  position: absolute;
  top: 1rem;
  left: 0;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  margin-left: 1rem;
  line-height: 2rem;
}
.input.range > .number {
  position: absolute;
  top: 1rem;
  right: 0;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  margin-right: 1rem;
  line-height: 2rem;
  text-align: right;
}
.input.range > input[type='number'].number {
  pointer-events: all;
  z-index: 10;
  width: 6rem;
  background-color: transparent;
}
.input.range > input[type='number'].number::-webkit-outer-spin-button,
.input.range > input[type='number'].number::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
.input.range input[type='range'] {
  position: absolute;
  top: 0;
  right: 0;
  width: calc(50% + 1rem);
  height: 100%;
  pointer-events: all;
  opacity: 0;
}
.input.range .slider {
  position: absolute;
  top: 0;
  right: 1rem;
  width: calc(50% - 1rem);
  height: 100%;
  display: flex;
  align-items: center;
}
.input.range .slider .bar {
  width: 100%;
  height: 1.5px;
  background: var(--input-fg);
}
.input.range .slider .button {
  position: absolute;
  width: 0;
  height: 2rem;
  left: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
}
.input.range .slider .button .e {
  position: absolute;
  width: 20px;
  height: 20px;
  box-shadow: inset 0 0 0 1.5px var(--input-fg);
  transition: box-shadow 0.1s ease-out;
  pointer-events: none;
  border-radius: 100px;
  background: var(--input-bg);
}
.input.range input[type='range'].mouse ~ .slider .button .e {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 20px var(--input-fg);
}
.input.range .slider .button .number {
  width: 6rem;
  position: absolute;
  font-size: 10pt;
  top: -12.5px;
  text-align: center;
}
.input.range .slider > .number {
  position: absolute;
}
.input.range.multiline {
  height: 6rem;
}
.input.range.multiline > label,
.input.range.multiline > .number {
  top: 0.5rem;
}
.input.range.multiline input[type='range'] {
  position: absolute;
  top: 1rem;
  right: 0;
  width: 100%;
  height: 100%;
  pointer-events: all;
  opacity: 0;
}
.input.range.multiline .slider {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: calc(100% - 2rem);
  height: 100%;
  display: flex;
  align-items: center;
}
/* file input (needs script) */
.input.file {
  position: relative;
  width: 100%;
  min-height: 4rem;
  border-radius: 1rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: flex-end;
  overflow: hidden;
  pointer-events: none;
}
.input.file label {
  position: absolute;
  top: 1rem;
  left: 0;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  transition: opacity 0.2s ease-out, top 0.2s ease-out;
  margin-left: 1rem;
  line-height: 2rem;
}
.input.file .files {
  width: calc(50% - 1rem);
  min-height: 2rem;
  right: 1rem;
  margin-top: 1rem;
  margin-bottom: 1rem;
  margin-right: 1rem;
  font-family: var(--sans-serif);
  font-size: 12pt;
  font-weight: 500;
  display: flex;
  align-items: center;
  cursor: pointer;
}
.input.file input[type='file'] {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: all;
  opacity: 0;
}
.input.file .border {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 1rem;
  transition: box-shadow 0.1s ease-out;
  pointer-events: none;
}
.input.file input[type='file']:hover ~ .border {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5px var(--input-fg) !important;
}
.input.file.drag .border {
  transition: box-shadow 0.2s ease-out;
  box-shadow: inset 0 0 0 1.5px var(--input-fg) !important;
}
/* textarea */
/* [pug]
.textarea
  textarea(placeholder="placeholder")
  label label
  .border
*/
